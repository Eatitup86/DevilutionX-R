// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: data.proto
// Protobuf C++ Version: 5.29.3

#include "data.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace dapi {
namespace data {

inline constexpr TriggerData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : lvl_{0u},
        x_{0},
        y_{0},
        type_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TriggerData::TriggerData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TriggerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TriggerDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TriggerDataDefaultTypeInternal() {}
  union {
    TriggerData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TriggerDataDefaultTypeInternal _TriggerData_default_instance_;

inline constexpr TownerData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _tname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0u},
        _ttype_{0u},
        _tx_{0},
        _ty_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TownerData::TownerData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TownerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TownerDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TownerDataDefaultTypeInternal() {}
  union {
    TownerData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TownerDataDefaultTypeInternal _TownerData_default_instance_;

inline constexpr TileData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{0},
        x_{0},
        solid_{false},
        stopmissile_{false},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TileData::TileData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TileDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileDataDefaultTypeInternal() {}
  union {
    TileData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileDataDefaultTypeInternal _TileData_default_instance_;

inline constexpr QuestData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{0u},
        state_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR QuestData::QuestData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct QuestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuestDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuestDataDefaultTypeInternal() {}
  union {
    QuestData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuestDataDefaultTypeInternal _QuestData_default_instance_;

inline constexpr PortalData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0u},
        y_{0u},
        player_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PortalData::PortalData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PortalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortalDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortalDataDefaultTypeInternal() {}
  union {
    PortalData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortalDataDefaultTypeInternal _PortalData_default_instance_;

inline constexpr PlayerData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _pspllvl_{},
        __pspllvl_cached_byte_size_{0},
        invbody_{},
        _invbody_cached_byte_size_{0},
        invlist_{},
        _invlist_cached_byte_size_{0},
        invgrid_{},
        _invgrid_cached_byte_size_{0},
        spdlist_{},
        _spdlist_cached_byte_size_{0},
        _pname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _pmode_{0},
        pnum_{0},
        plrlevel_{0},
        _px_{0},
        _py_{0},
        _pfutx_{0},
        _pfuty_{0},
        _pdir_{0},
        _prspell_{0},
        _prspltype_{0u},
        _pmemspells_{::uint64_t{0u}},
        _pablspells_{::uint64_t{0u}},
        _pscrlspells_{::uint64_t{0u}},
        _pclass_{0u},
        _pstrength_{0u},
        _pbasestr_{0u},
        _pmagic_{0u},
        _pbasemag_{0u},
        _pdexterity_{0u},
        _pbasedex_{0u},
        _pvitality_{0u},
        _pbasevit_{0u},
        _pstatpts_{0u},
        _pdamagemod_{0u},
        _phitpoints_{0u},
        _pmaxhp_{0u},
        _pmana_{0},
        _pmaxmana_{0u},
        _plevel_{0u},
        _pexperience_{0u},
        _parmorclass_{0u},
        _pmagresist_{0u},
        _pfireresist_{0u},
        _plightresist_{0u},
        _pgold_{0u},
        holditem_{0},
        _piac_{0u},
        _pimindam_{0u},
        _pimaxdam_{0u},
        _pibonusdam_{0u},
        _pibonustohit_{0u},
        _pibonusac_{0u},
        _pibonusdammod_{0u},
        pmanashield_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerData::PlayerData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDataDefaultTypeInternal() {}
  union {
    PlayerData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDataDefaultTypeInternal _PlayerData_default_instance_;

inline constexpr ObjectData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0u},
        y_{0u},
        type_{0},
        shrinetype_{0},
        doorstate_{0},
        solid_{false},
        selectable_{false},
        trapped_{false},
        index_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ObjectData::ObjectData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ObjectDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDataDefaultTypeInternal() {}
  union {
    ObjectData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDataDefaultTypeInternal _ObjectData_default_instance_;

inline constexpr MonsterData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        index_{0u},
        x_{0},
        y_{0},
        futx_{0},
        futy_{0},
        type_{0},
        kills_{0},
        mode_{0},
        unique_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MonsterData::MonsterData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MonsterDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonsterDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonsterDataDefaultTypeInternal() {}
  union {
    MonsterData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonsterDataDefaultTypeInternal _MonsterData_default_instance_;

inline constexpr MissileData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{0},
        x_{0u},
        y_{0u},
        xvel_{0},
        yvel_{0},
        sx_{0},
        sy_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MissileData::MissileData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MissileDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MissileDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MissileDataDefaultTypeInternal() {}
  union {
    MissileData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MissileDataDefaultTypeInternal _MissileData_default_instance_;

inline constexpr ItemData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _iname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _iiname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0u},
        _itype_{0},
        _ix_{0},
        _iy_{0},
        _imagical_{0u},
        _iclass_{0u},
        _icurs_{0},
        _ivalue_{0},
        _imindam_{0},
        _imaxdam_{0},
        _iac_{0},
        _iflags_{0},
        _imiscid_{0},
        _ispell_{0},
        _icharges_{0},
        _imaxcharges_{0},
        _idurability_{0},
        _imaxdur_{0},
        _ipldam_{0},
        _ipltohit_{0},
        _iplac_{0},
        _iplstr_{0},
        _iplmag_{0},
        _iidentified_{false},
        _istatflag_{false},
        _ipldex_{0},
        _iplvit_{0},
        _iplfr_{0},
        _ipllr_{0},
        _iplmr_{0},
        _iplmana_{0},
        _iplhp_{0},
        _ipldammod_{0},
        _iplgethit_{0},
        _ipllight_{0},
        _ispllvladd_{0},
        _ifmindam_{0},
        _ifmaxdam_{0},
        _ilmindam_{0},
        _ilmaxdam_{0},
        _iprepower_{0},
        _isufpower_{0},
        _iminstr_{0},
        _iminmag_{0},
        _imindex_{0},
        ididx_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ItemData::ItemData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDataDefaultTypeInternal() {}
  union {
    ItemData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDataDefaultTypeInternal _ItemData_default_instance_;
}  // namespace data
}  // namespace dapi
namespace dapi {
namespace data {
// ===================================================================

class QuestData::_Internal {
 public:
};

QuestData::QuestData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.QuestData)
}
QuestData::QuestData(
    ::google::protobuf::Arena* arena, const QuestData& from)
    : QuestData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE QuestData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void QuestData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, state_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::state_));
}
QuestData::~QuestData() {
  // @@protoc_insertion_point(destructor:dapi.data.QuestData)
  SharedDtor(*this);
}
inline void QuestData::SharedDtor(MessageLite& self) {
  QuestData& this_ = static_cast<QuestData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* QuestData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) QuestData(arena);
}
constexpr auto QuestData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(QuestData),
                                            alignof(QuestData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<20> QuestData::_class_data_ = {
    {
        &_QuestData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &QuestData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<QuestData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &QuestData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<QuestData>(), &QuestData::ByteSizeLong,
            &QuestData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(QuestData, _impl_._cached_size_),
        true,
    },
    "dapi.data.QuestData",
};
const ::google::protobuf::internal::ClassData* QuestData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> QuestData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::QuestData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 state = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(QuestData, _impl_.state_)}},
    // uint32 id = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(QuestData, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1;
    {PROTOBUF_FIELD_OFFSET(QuestData, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 state = 2;
    {PROTOBUF_FIELD_OFFSET(QuestData, _impl_.state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void QuestData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.QuestData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* QuestData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const QuestData& this_ = static_cast<const QuestData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* QuestData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const QuestData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.QuestData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 id = 1;
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_id(), target);
          }

          // uint32 state = 2;
          if (this_._internal_state() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_state(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.QuestData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t QuestData::ByteSizeLong(const MessageLite& base) {
          const QuestData& this_ = static_cast<const QuestData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t QuestData::ByteSizeLong() const {
          const QuestData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.QuestData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_id());
            }
            // uint32 state = 2;
            if (this_._internal_state() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_state());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void QuestData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QuestData*>(&to_msg);
  auto& from = static_cast<const QuestData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.QuestData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_state() != 0) {
    _this->_impl_.state_ = from._impl_.state_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void QuestData::CopyFrom(const QuestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.QuestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void QuestData::InternalSwap(QuestData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuestData, _impl_.state_)
      + sizeof(QuestData::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(QuestData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

// ===================================================================

class PortalData::_Internal {
 public:
};

PortalData::PortalData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.PortalData)
}
PortalData::PortalData(
    ::google::protobuf::Arena* arena, const PortalData& from)
    : PortalData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PortalData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PortalData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, player_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::player_));
}
PortalData::~PortalData() {
  // @@protoc_insertion_point(destructor:dapi.data.PortalData)
  SharedDtor(*this);
}
inline void PortalData::SharedDtor(MessageLite& self) {
  PortalData& this_ = static_cast<PortalData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PortalData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PortalData(arena);
}
constexpr auto PortalData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PortalData),
                                            alignof(PortalData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<21> PortalData::_class_data_ = {
    {
        &_PortalData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PortalData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<PortalData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PortalData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<PortalData>(), &PortalData::ByteSizeLong,
            &PortalData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PortalData, _impl_._cached_size_),
        true,
    },
    "dapi.data.PortalData",
};
const ::google::protobuf::internal::ClassData* PortalData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> PortalData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::PortalData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 x = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PortalData, _impl_.x_)}},
    // uint32 y = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PortalData, _impl_.y_)}},
    // uint32 player = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PortalData, _impl_.player_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 x = 1;
    {PROTOBUF_FIELD_OFFSET(PortalData, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 y = 2;
    {PROTOBUF_FIELD_OFFSET(PortalData, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 player = 3;
    {PROTOBUF_FIELD_OFFSET(PortalData, _impl_.player_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PortalData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.PortalData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.player_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.player_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PortalData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PortalData& this_ = static_cast<const PortalData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PortalData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PortalData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.PortalData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 x = 1;
          if (this_._internal_x() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_x(), target);
          }

          // uint32 y = 2;
          if (this_._internal_y() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_y(), target);
          }

          // uint32 player = 3;
          if (this_._internal_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_player(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.PortalData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PortalData::ByteSizeLong(const MessageLite& base) {
          const PortalData& this_ = static_cast<const PortalData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PortalData::ByteSizeLong() const {
          const PortalData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.PortalData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 x = 1;
            if (this_._internal_x() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_x());
            }
            // uint32 y = 2;
            if (this_._internal_y() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_y());
            }
            // uint32 player = 3;
            if (this_._internal_player() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_player());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void PortalData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PortalData*>(&to_msg);
  auto& from = static_cast<const PortalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.PortalData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (from._internal_y() != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (from._internal_player() != 0) {
    _this->_impl_.player_ = from._impl_.player_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PortalData::CopyFrom(const PortalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.PortalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PortalData::InternalSwap(PortalData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortalData, _impl_.player_)
      + sizeof(PortalData::_impl_.player_)
      - PROTOBUF_FIELD_OFFSET(PortalData, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

// ===================================================================

class MissileData::_Internal {
 public:
};

MissileData::MissileData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.MissileData)
}
MissileData::MissileData(
    ::google::protobuf::Arena* arena, const MissileData& from)
    : MissileData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MissileData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MissileData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           0,
           offsetof(Impl_, sy_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::sy_));
}
MissileData::~MissileData() {
  // @@protoc_insertion_point(destructor:dapi.data.MissileData)
  SharedDtor(*this);
}
inline void MissileData::SharedDtor(MessageLite& self) {
  MissileData& this_ = static_cast<MissileData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MissileData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MissileData(arena);
}
constexpr auto MissileData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MissileData),
                                            alignof(MissileData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<22> MissileData::_class_data_ = {
    {
        &_MissileData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MissileData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<MissileData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MissileData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<MissileData>(), &MissileData::ByteSizeLong,
            &MissileData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MissileData, _impl_._cached_size_),
        true,
    },
    "dapi.data.MissileData",
};
const ::google::protobuf::internal::ClassData* MissileData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> MissileData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::MissileData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // sint32 type = 1;
    {::_pbi::TcParser::FastZ32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MissileData, _impl_.type_)}},
    // uint32 x = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MissileData, _impl_.x_)}},
    // uint32 y = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MissileData, _impl_.y_)}},
    // sint32 xvel = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MissileData, _impl_.xvel_)}},
    // sint32 yvel = 5;
    {::_pbi::TcParser::FastZ32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MissileData, _impl_.yvel_)}},
    // sint32 sx = 6;
    {::_pbi::TcParser::FastZ32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MissileData, _impl_.sx_)}},
    // sint32 sy = 7;
    {::_pbi::TcParser::FastZ32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MissileData, _impl_.sy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // sint32 type = 1;
    {PROTOBUF_FIELD_OFFSET(MissileData, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // uint32 x = 2;
    {PROTOBUF_FIELD_OFFSET(MissileData, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 y = 3;
    {PROTOBUF_FIELD_OFFSET(MissileData, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // sint32 xvel = 4;
    {PROTOBUF_FIELD_OFFSET(MissileData, _impl_.xvel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 yvel = 5;
    {PROTOBUF_FIELD_OFFSET(MissileData, _impl_.yvel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 sx = 6;
    {PROTOBUF_FIELD_OFFSET(MissileData, _impl_.sx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 sy = 7;
    {PROTOBUF_FIELD_OFFSET(MissileData, _impl_.sy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MissileData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.MissileData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sy_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.sy_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MissileData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MissileData& this_ = static_cast<const MissileData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MissileData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MissileData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.MissileData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // sint32 type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                1, this_._internal_type(), target);
          }

          // uint32 x = 2;
          if (this_._internal_x() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_x(), target);
          }

          // uint32 y = 3;
          if (this_._internal_y() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_y(), target);
          }

          // sint32 xvel = 4;
          if (this_._internal_xvel() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                4, this_._internal_xvel(), target);
          }

          // sint32 yvel = 5;
          if (this_._internal_yvel() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                5, this_._internal_yvel(), target);
          }

          // sint32 sx = 6;
          if (this_._internal_sx() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                6, this_._internal_sx(), target);
          }

          // sint32 sy = 7;
          if (this_._internal_sy() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                7, this_._internal_sy(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.MissileData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MissileData::ByteSizeLong(const MessageLite& base) {
          const MissileData& this_ = static_cast<const MissileData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MissileData::ByteSizeLong() const {
          const MissileData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.MissileData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // sint32 type = 1;
            if (this_._internal_type() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_type());
            }
            // uint32 x = 2;
            if (this_._internal_x() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_x());
            }
            // uint32 y = 3;
            if (this_._internal_y() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_y());
            }
            // sint32 xvel = 4;
            if (this_._internal_xvel() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_xvel());
            }
            // sint32 yvel = 5;
            if (this_._internal_yvel() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_yvel());
            }
            // sint32 sx = 6;
            if (this_._internal_sx() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_sx());
            }
            // sint32 sy = 7;
            if (this_._internal_sy() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_sy());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void MissileData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MissileData*>(&to_msg);
  auto& from = static_cast<const MissileData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.MissileData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_x() != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (from._internal_y() != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (from._internal_xvel() != 0) {
    _this->_impl_.xvel_ = from._impl_.xvel_;
  }
  if (from._internal_yvel() != 0) {
    _this->_impl_.yvel_ = from._impl_.yvel_;
  }
  if (from._internal_sx() != 0) {
    _this->_impl_.sx_ = from._impl_.sx_;
  }
  if (from._internal_sy() != 0) {
    _this->_impl_.sy_ = from._impl_.sy_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MissileData::CopyFrom(const MissileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.MissileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MissileData::InternalSwap(MissileData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissileData, _impl_.sy_)
      + sizeof(MissileData::_impl_.sy_)
      - PROTOBUF_FIELD_OFFSET(MissileData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

// ===================================================================

class ObjectData::_Internal {
 public:
};

ObjectData::ObjectData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.ObjectData)
}
ObjectData::ObjectData(
    ::google::protobuf::Arena* arena, const ObjectData& from)
    : ObjectData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ObjectData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ObjectData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, index_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::index_));
}
ObjectData::~ObjectData() {
  // @@protoc_insertion_point(destructor:dapi.data.ObjectData)
  SharedDtor(*this);
}
inline void ObjectData::SharedDtor(MessageLite& self) {
  ObjectData& this_ = static_cast<ObjectData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ObjectData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ObjectData(arena);
}
constexpr auto ObjectData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ObjectData),
                                            alignof(ObjectData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<21> ObjectData::_class_data_ = {
    {
        &_ObjectData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ObjectData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<ObjectData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ObjectData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<ObjectData>(), &ObjectData::ByteSizeLong,
            &ObjectData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ObjectData, _impl_._cached_size_),
        true,
    },
    "dapi.data.ObjectData",
};
const ::google::protobuf::internal::ClassData* ObjectData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 0, 2> ObjectData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::ObjectData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 x = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.x_)}},
    // uint32 y = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.y_)}},
    // sint32 type = 3;
    {::_pbi::TcParser::FastZ32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.type_)}},
    // sint32 shrineType = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.shrinetype_)}},
    // bool solid = 5;
    {::_pbi::TcParser::FastV8S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.solid_)}},
    // sint32 doorState = 6;
    {::_pbi::TcParser::FastZ32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.doorstate_)}},
    // bool selectable = 7;
    {::_pbi::TcParser::FastV8S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.selectable_)}},
    // uint32 index = 8;
    {::_pbi::TcParser::FastV32S1,
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.index_)}},
    // bool trapped = 9;
    {::_pbi::TcParser::FastV8S1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.trapped_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 x = 1;
    {PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 y = 2;
    {PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // sint32 type = 3;
    {PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 shrineType = 4;
    {PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.shrinetype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // bool solid = 5;
    {PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.solid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // sint32 doorState = 6;
    {PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.doorstate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // bool selectable = 7;
    {PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.selectable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 index = 8;
    {PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool trapped = 9;
    {PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.trapped_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.ObjectData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ObjectData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ObjectData& this_ = static_cast<const ObjectData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ObjectData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ObjectData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.ObjectData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 x = 1;
          if (this_._internal_x() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_x(), target);
          }

          // uint32 y = 2;
          if (this_._internal_y() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_y(), target);
          }

          // sint32 type = 3;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                3, this_._internal_type(), target);
          }

          // sint32 shrineType = 4;
          if (this_._internal_shrinetype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                4, this_._internal_shrinetype(), target);
          }

          // bool solid = 5;
          if (this_._internal_solid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_solid(), target);
          }

          // sint32 doorState = 6;
          if (this_._internal_doorstate() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                6, this_._internal_doorstate(), target);
          }

          // bool selectable = 7;
          if (this_._internal_selectable() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_selectable(), target);
          }

          // uint32 index = 8;
          if (this_._internal_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                8, this_._internal_index(), target);
          }

          // bool trapped = 9;
          if (this_._internal_trapped() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_trapped(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.ObjectData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ObjectData::ByteSizeLong(const MessageLite& base) {
          const ObjectData& this_ = static_cast<const ObjectData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ObjectData::ByteSizeLong() const {
          const ObjectData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.ObjectData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 x = 1;
            if (this_._internal_x() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_x());
            }
            // uint32 y = 2;
            if (this_._internal_y() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_y());
            }
            // sint32 type = 3;
            if (this_._internal_type() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_type());
            }
            // sint32 shrineType = 4;
            if (this_._internal_shrinetype() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_shrinetype());
            }
            // sint32 doorState = 6;
            if (this_._internal_doorstate() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_doorstate());
            }
            // bool solid = 5;
            if (this_._internal_solid() != 0) {
              total_size += 2;
            }
            // bool selectable = 7;
            if (this_._internal_selectable() != 0) {
              total_size += 2;
            }
            // bool trapped = 9;
            if (this_._internal_trapped() != 0) {
              total_size += 2;
            }
            // uint32 index = 8;
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_index());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void ObjectData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ObjectData*>(&to_msg);
  auto& from = static_cast<const ObjectData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.ObjectData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (from._internal_y() != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_shrinetype() != 0) {
    _this->_impl_.shrinetype_ = from._impl_.shrinetype_;
  }
  if (from._internal_doorstate() != 0) {
    _this->_impl_.doorstate_ = from._impl_.doorstate_;
  }
  if (from._internal_solid() != 0) {
    _this->_impl_.solid_ = from._impl_.solid_;
  }
  if (from._internal_selectable() != 0) {
    _this->_impl_.selectable_ = from._impl_.selectable_;
  }
  if (from._internal_trapped() != 0) {
    _this->_impl_.trapped_ = from._impl_.trapped_;
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObjectData::CopyFrom(const ObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.ObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ObjectData::InternalSwap(ObjectData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.index_)
      + sizeof(ObjectData::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ObjectData, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

// ===================================================================

class MonsterData::_Internal {
 public:
};

MonsterData::MonsterData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.MonsterData)
}
inline PROTOBUF_NDEBUG_INLINE MonsterData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dapi::data::MonsterData& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

MonsterData::MonsterData(
    ::google::protobuf::Arena* arena,
    const MonsterData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MonsterData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, index_),
           offsetof(Impl_, unique_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::unique_));

  // @@protoc_insertion_point(copy_constructor:dapi.data.MonsterData)
}
inline PROTOBUF_NDEBUG_INLINE MonsterData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void MonsterData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           0,
           offsetof(Impl_, unique_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::unique_));
}
MonsterData::~MonsterData() {
  // @@protoc_insertion_point(destructor:dapi.data.MonsterData)
  SharedDtor(*this);
}
inline void MonsterData::SharedDtor(MessageLite& self) {
  MonsterData& this_ = static_cast<MonsterData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MonsterData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MonsterData(arena);
}
constexpr auto MonsterData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MonsterData),
                                            alignof(MonsterData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<22> MonsterData::_class_data_ = {
    {
        &_MonsterData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MonsterData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<MonsterData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MonsterData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<MonsterData>(), &MonsterData::ByteSizeLong,
            &MonsterData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MonsterData, _impl_._cached_size_),
        true,
    },
    "dapi.data.MonsterData",
};
const ::google::protobuf::internal::ClassData* MonsterData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 42, 2> MonsterData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::MonsterData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 index = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.index_)}},
    // sint32 x = 2;
    {::_pbi::TcParser::FastZ32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.x_)}},
    // sint32 y = 3;
    {::_pbi::TcParser::FastZ32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.y_)}},
    // sint32 futx = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.futx_)}},
    // sint32 futy = 5;
    {::_pbi::TcParser::FastZ32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.futy_)}},
    // string name = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.name_)}},
    // sint32 type = 7;
    {::_pbi::TcParser::FastZ32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.type_)}},
    // sint32 kills = 8;
    {::_pbi::TcParser::FastZ32S1,
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.kills_)}},
    // sint32 mode = 9;
    {::_pbi::TcParser::FastZ32S1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.mode_)}},
    // bool unique = 10;
    {::_pbi::TcParser::FastV8S1,
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.unique_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // sint32 x = 2;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 y = 3;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 futx = 4;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.futx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 futy = 5;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.futy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // string name = 6;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // sint32 type = 7;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 kills = 8;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.kills_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 mode = 9;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // bool unique = 10;
    {PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.unique_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\25\0\0\0\0\0\4\0\0\0\0\0\0\0\0\0"
    "dapi.data.MonsterData"
    "name"
  }},
};

PROTOBUF_NOINLINE void MonsterData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.MonsterData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unique_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.unique_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MonsterData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MonsterData& this_ = static_cast<const MonsterData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MonsterData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MonsterData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.MonsterData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 index = 1;
          if (this_._internal_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_index(), target);
          }

          // sint32 x = 2;
          if (this_._internal_x() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                2, this_._internal_x(), target);
          }

          // sint32 y = 3;
          if (this_._internal_y() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                3, this_._internal_y(), target);
          }

          // sint32 futx = 4;
          if (this_._internal_futx() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                4, this_._internal_futx(), target);
          }

          // sint32 futy = 5;
          if (this_._internal_futy() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                5, this_._internal_futy(), target);
          }

          // string name = 6;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dapi.data.MonsterData.name");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // sint32 type = 7;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                7, this_._internal_type(), target);
          }

          // sint32 kills = 8;
          if (this_._internal_kills() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                8, this_._internal_kills(), target);
          }

          // sint32 mode = 9;
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                9, this_._internal_mode(), target);
          }

          // bool unique = 10;
          if (this_._internal_unique() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_unique(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.MonsterData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MonsterData::ByteSizeLong(const MessageLite& base) {
          const MonsterData& this_ = static_cast<const MonsterData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MonsterData::ByteSizeLong() const {
          const MonsterData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.MonsterData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 6;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // uint32 index = 1;
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_index());
            }
            // sint32 x = 2;
            if (this_._internal_x() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_x());
            }
            // sint32 y = 3;
            if (this_._internal_y() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_y());
            }
            // sint32 futx = 4;
            if (this_._internal_futx() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_futx());
            }
            // sint32 futy = 5;
            if (this_._internal_futy() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_futy());
            }
            // sint32 type = 7;
            if (this_._internal_type() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_type());
            }
            // sint32 kills = 8;
            if (this_._internal_kills() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_kills());
            }
            // sint32 mode = 9;
            if (this_._internal_mode() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_mode());
            }
            // bool unique = 10;
            if (this_._internal_unique() != 0) {
              total_size += 2;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void MonsterData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MonsterData*>(&to_msg);
  auto& from = static_cast<const MonsterData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.MonsterData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  if (from._internal_x() != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (from._internal_y() != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (from._internal_futx() != 0) {
    _this->_impl_.futx_ = from._impl_.futx_;
  }
  if (from._internal_futy() != 0) {
    _this->_impl_.futy_ = from._impl_.futy_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_kills() != 0) {
    _this->_impl_.kills_ = from._impl_.kills_;
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  if (from._internal_unique() != 0) {
    _this->_impl_.unique_ = from._impl_.unique_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MonsterData::CopyFrom(const MonsterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.MonsterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MonsterData::InternalSwap(MonsterData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.unique_)
      + sizeof(MonsterData::_impl_.unique_)
      - PROTOBUF_FIELD_OFFSET(MonsterData, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

// ===================================================================

class TriggerData::_Internal {
 public:
};

TriggerData::TriggerData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.TriggerData)
}
TriggerData::TriggerData(
    ::google::protobuf::Arena* arena, const TriggerData& from)
    : TriggerData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TriggerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TriggerData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lvl_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, lvl_) +
               sizeof(Impl_::type_));
}
TriggerData::~TriggerData() {
  // @@protoc_insertion_point(destructor:dapi.data.TriggerData)
  SharedDtor(*this);
}
inline void TriggerData::SharedDtor(MessageLite& self) {
  TriggerData& this_ = static_cast<TriggerData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TriggerData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TriggerData(arena);
}
constexpr auto TriggerData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TriggerData),
                                            alignof(TriggerData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<22> TriggerData::_class_data_ = {
    {
        &_TriggerData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TriggerData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<TriggerData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TriggerData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<TriggerData>(), &TriggerData::ByteSizeLong,
            &TriggerData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TriggerData, _impl_._cached_size_),
        true,
    },
    "dapi.data.TriggerData",
};
const ::google::protobuf::internal::ClassData* TriggerData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> TriggerData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::TriggerData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // sint32 type = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.type_)}},
    // uint32 lvl = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.lvl_)}},
    // sint32 x = 2;
    {::_pbi::TcParser::FastZ32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.x_)}},
    // sint32 y = 3;
    {::_pbi::TcParser::FastZ32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.y_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 lvl = 1;
    {PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.lvl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // sint32 x = 2;
    {PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 y = 3;
    {PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 type = 4;
    {PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TriggerData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.TriggerData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lvl_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.lvl_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TriggerData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TriggerData& this_ = static_cast<const TriggerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TriggerData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TriggerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.TriggerData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 lvl = 1;
          if (this_._internal_lvl() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_lvl(), target);
          }

          // sint32 x = 2;
          if (this_._internal_x() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                2, this_._internal_x(), target);
          }

          // sint32 y = 3;
          if (this_._internal_y() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                3, this_._internal_y(), target);
          }

          // sint32 type = 4;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                4, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.TriggerData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TriggerData::ByteSizeLong(const MessageLite& base) {
          const TriggerData& this_ = static_cast<const TriggerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TriggerData::ByteSizeLong() const {
          const TriggerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.TriggerData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 lvl = 1;
            if (this_._internal_lvl() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_lvl());
            }
            // sint32 x = 2;
            if (this_._internal_x() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_x());
            }
            // sint32 y = 3;
            if (this_._internal_y() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_y());
            }
            // sint32 type = 4;
            if (this_._internal_type() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_type());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TriggerData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TriggerData*>(&to_msg);
  auto& from = static_cast<const TriggerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.TriggerData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lvl() != 0) {
    _this->_impl_.lvl_ = from._impl_.lvl_;
  }
  if (from._internal_x() != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (from._internal_y() != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TriggerData::CopyFrom(const TriggerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.TriggerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TriggerData::InternalSwap(TriggerData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.type_)
      + sizeof(TriggerData::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TriggerData, _impl_.lvl_)>(
          reinterpret_cast<char*>(&_impl_.lvl_),
          reinterpret_cast<char*>(&other->_impl_.lvl_));
}

// ===================================================================

class TileData::_Internal {
 public:
};

TileData::TileData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.TileData)
}
TileData::TileData(
    ::google::protobuf::Arena* arena, const TileData& from)
    : TileData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TileData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TileData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::y_));
}
TileData::~TileData() {
  // @@protoc_insertion_point(destructor:dapi.data.TileData)
  SharedDtor(*this);
}
inline void TileData::SharedDtor(MessageLite& self) {
  TileData& this_ = static_cast<TileData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TileData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TileData(arena);
}
constexpr auto TileData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TileData),
                                            alignof(TileData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<19> TileData::_class_data_ = {
    {
        &_TileData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TileData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<TileData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TileData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<TileData>(), &TileData::ByteSizeLong,
            &TileData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TileData, _impl_._cached_size_),
        true,
    },
    "dapi.data.TileData",
};
const ::google::protobuf::internal::ClassData* TileData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> TileData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::TileData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // sint32 type = 1;
    {::_pbi::TcParser::FastZ32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TileData, _impl_.type_)}},
    // bool solid = 2;
    {::_pbi::TcParser::FastV8S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TileData, _impl_.solid_)}},
    // sint32 x = 3;
    {::_pbi::TcParser::FastZ32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TileData, _impl_.x_)}},
    // sint32 y = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TileData, _impl_.y_)}},
    // bool stopMissile = 5;
    {::_pbi::TcParser::FastV8S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TileData, _impl_.stopmissile_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // sint32 type = 1;
    {PROTOBUF_FIELD_OFFSET(TileData, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // bool solid = 2;
    {PROTOBUF_FIELD_OFFSET(TileData, _impl_.solid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // sint32 x = 3;
    {PROTOBUF_FIELD_OFFSET(TileData, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 y = 4;
    {PROTOBUF_FIELD_OFFSET(TileData, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // bool stopMissile = 5;
    {PROTOBUF_FIELD_OFFSET(TileData, _impl_.stopmissile_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TileData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.TileData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TileData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TileData& this_ = static_cast<const TileData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TileData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TileData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.TileData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // sint32 type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                1, this_._internal_type(), target);
          }

          // bool solid = 2;
          if (this_._internal_solid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_solid(), target);
          }

          // sint32 x = 3;
          if (this_._internal_x() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                3, this_._internal_x(), target);
          }

          // sint32 y = 4;
          if (this_._internal_y() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                4, this_._internal_y(), target);
          }

          // bool stopMissile = 5;
          if (this_._internal_stopmissile() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_stopmissile(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.TileData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TileData::ByteSizeLong(const MessageLite& base) {
          const TileData& this_ = static_cast<const TileData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TileData::ByteSizeLong() const {
          const TileData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.TileData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // sint32 type = 1;
            if (this_._internal_type() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_type());
            }
            // sint32 x = 3;
            if (this_._internal_x() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_x());
            }
            // bool solid = 2;
            if (this_._internal_solid() != 0) {
              total_size += 2;
            }
            // bool stopMissile = 5;
            if (this_._internal_stopmissile() != 0) {
              total_size += 2;
            }
            // sint32 y = 4;
            if (this_._internal_y() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_y());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TileData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TileData*>(&to_msg);
  auto& from = static_cast<const TileData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.TileData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_x() != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (from._internal_solid() != 0) {
    _this->_impl_.solid_ = from._impl_.solid_;
  }
  if (from._internal_stopmissile() != 0) {
    _this->_impl_.stopmissile_ = from._impl_.stopmissile_;
  }
  if (from._internal_y() != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TileData::CopyFrom(const TileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.TileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TileData::InternalSwap(TileData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileData, _impl_.y_)
      + sizeof(TileData::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(TileData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

// ===================================================================

class TownerData::_Internal {
 public:
};

TownerData::TownerData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.TownerData)
}
inline PROTOBUF_NDEBUG_INLINE TownerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dapi::data::TownerData& from_msg)
      : _tname_(arena, from._tname_),
        _cached_size_{0} {}

TownerData::TownerData(
    ::google::protobuf::Arena* arena,
    const TownerData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TownerData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, _ty_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::_ty_));

  // @@protoc_insertion_point(copy_constructor:dapi.data.TownerData)
}
inline PROTOBUF_NDEBUG_INLINE TownerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _tname_(arena),
        _cached_size_{0} {}

inline void TownerData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, _ty_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::_ty_));
}
TownerData::~TownerData() {
  // @@protoc_insertion_point(destructor:dapi.data.TownerData)
  SharedDtor(*this);
}
inline void TownerData::SharedDtor(MessageLite& self) {
  TownerData& this_ = static_cast<TownerData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_._tname_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TownerData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TownerData(arena);
}
constexpr auto TownerData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TownerData),
                                            alignof(TownerData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<21> TownerData::_class_data_ = {
    {
        &_TownerData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TownerData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<TownerData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TownerData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<TownerData>(), &TownerData::ByteSizeLong,
            &TownerData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TownerData, _impl_._cached_size_),
        true,
    },
    "dapi.data.TownerData",
};
const ::google::protobuf::internal::ClassData* TownerData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 35, 2> TownerData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::TownerData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 ID = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TownerData, _impl_.id_)}},
    // uint32 _ttype = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TownerData, _impl_._ttype_)}},
    // sint32 _tx = 3;
    {::_pbi::TcParser::FastZ32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TownerData, _impl_._tx_)}},
    // sint32 _ty = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TownerData, _impl_._ty_)}},
    // string _tName = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TownerData, _impl_._tname_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 ID = 1;
    {PROTOBUF_FIELD_OFFSET(TownerData, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _ttype = 2;
    {PROTOBUF_FIELD_OFFSET(TownerData, _impl_._ttype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // sint32 _tx = 3;
    {PROTOBUF_FIELD_OFFSET(TownerData, _impl_._tx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _ty = 4;
    {PROTOBUF_FIELD_OFFSET(TownerData, _impl_._ty_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // string _tName = 5;
    {PROTOBUF_FIELD_OFFSET(TownerData, _impl_._tname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\0\0\0\6\0\0"
    "dapi.data.TownerData"
    "_tName"
  }},
};

PROTOBUF_NOINLINE void TownerData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.TownerData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._tname_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_._ty_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_._ty_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TownerData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TownerData& this_ = static_cast<const TownerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TownerData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TownerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.TownerData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 ID = 1;
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_id(), target);
          }

          // uint32 _ttype = 2;
          if (this_._internal__ttype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal__ttype(), target);
          }

          // sint32 _tx = 3;
          if (this_._internal__tx() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                3, this_._internal__tx(), target);
          }

          // sint32 _ty = 4;
          if (this_._internal__ty() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                4, this_._internal__ty(), target);
          }

          // string _tName = 5;
          if (!this_._internal__tname().empty()) {
            const std::string& _s = this_._internal__tname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dapi.data.TownerData._tName");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.TownerData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TownerData::ByteSizeLong(const MessageLite& base) {
          const TownerData& this_ = static_cast<const TownerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TownerData::ByteSizeLong() const {
          const TownerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.TownerData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string _tName = 5;
            if (!this_._internal__tname().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal__tname());
            }
            // uint32 ID = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_id());
            }
            // uint32 _ttype = 2;
            if (this_._internal__ttype() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal__ttype());
            }
            // sint32 _tx = 3;
            if (this_._internal__tx() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__tx());
            }
            // sint32 _ty = 4;
            if (this_._internal__ty() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__ty());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TownerData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TownerData*>(&to_msg);
  auto& from = static_cast<const TownerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.TownerData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal__tname().empty()) {
    _this->_internal_set__tname(from._internal__tname());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal__ttype() != 0) {
    _this->_impl_._ttype_ = from._impl_._ttype_;
  }
  if (from._internal__tx() != 0) {
    _this->_impl_._tx_ = from._impl_._tx_;
  }
  if (from._internal__ty() != 0) {
    _this->_impl_._ty_ = from._impl_._ty_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TownerData::CopyFrom(const TownerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.TownerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TownerData::InternalSwap(TownerData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_._tname_, &other->_impl_._tname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TownerData, _impl_._ty_)
      + sizeof(TownerData::_impl_._ty_)
      - PROTOBUF_FIELD_OFFSET(TownerData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

// ===================================================================

class ItemData::_Internal {
 public:
};

ItemData::ItemData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.ItemData)
}
inline PROTOBUF_NDEBUG_INLINE ItemData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dapi::data::ItemData& from_msg)
      : _iname_(arena, from._iname_),
        _iiname_(arena, from._iiname_),
        _cached_size_{0} {}

ItemData::ItemData(
    ::google::protobuf::Arena* arena,
    const ItemData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ItemData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, ididx_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::ididx_));

  // @@protoc_insertion_point(copy_constructor:dapi.data.ItemData)
}
inline PROTOBUF_NDEBUG_INLINE ItemData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _iname_(arena),
        _iiname_(arena),
        _cached_size_{0} {}

inline void ItemData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, ididx_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::ididx_));
}
ItemData::~ItemData() {
  // @@protoc_insertion_point(destructor:dapi.data.ItemData)
  SharedDtor(*this);
}
inline void ItemData::SharedDtor(MessageLite& self) {
  ItemData& this_ = static_cast<ItemData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_._iname_.Destroy();
  this_._impl_._iiname_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ItemData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ItemData(arena);
}
constexpr auto ItemData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ItemData),
                                            alignof(ItemData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<19> ItemData::_class_data_ = {
    {
        &_ItemData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ItemData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<ItemData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ItemData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<ItemData>(), &ItemData::ByteSizeLong,
            &ItemData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ItemData, _impl_._cached_size_),
        true,
    },
    "dapi.data.ItemData",
};
const ::google::protobuf::internal::ClassData* ItemData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 48, 0, 88, 7> ItemData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    48, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    48,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::ItemData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 ID = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_.id_)}},
    // sint32 _itype = 2;
    {::_pbi::TcParser::FastZ32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._itype_)}},
    // sint32 _ix = 3;
    {::_pbi::TcParser::FastZ32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ix_)}},
    // sint32 _iy = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iy_)}},
    // bool _iIdentified = 5;
    {::_pbi::TcParser::FastV8S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iidentified_)}},
    // uint32 _iMagical = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imagical_)}},
    // string _iName = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iname_)}},
    // string _iIName = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iiname_)}},
    // uint32 _iClass = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iclass_)}},
    // sint32 _iCurs = 10;
    {::_pbi::TcParser::FastZ32S1,
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._icurs_)}},
    // sint32 _iValue = 11;
    {::_pbi::TcParser::FastZ32S1,
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ivalue_)}},
    // sint32 _iMinDam = 12;
    {::_pbi::TcParser::FastZ32S1,
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imindam_)}},
    // sint32 _iMaxDam = 13;
    {::_pbi::TcParser::FastZ32S1,
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imaxdam_)}},
    // sint32 _iAC = 14;
    {::_pbi::TcParser::FastZ32S1,
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iac_)}},
    // sint32 _iFlags = 15;
    {::_pbi::TcParser::FastZ32S1,
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iflags_)}},
    // sint32 _iMiscId = 16;
    {::_pbi::TcParser::FastZ32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imiscid_)}},
    // sint32 _iSpell = 17;
    {::_pbi::TcParser::FastZ32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ispell_)}},
    // sint32 _iCharges = 18;
    {::_pbi::TcParser::FastZ32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._icharges_)}},
    // sint32 _iMaxCharges = 19;
    {::_pbi::TcParser::FastZ32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imaxcharges_)}},
    // sint32 _iDurability = 20;
    {::_pbi::TcParser::FastZ32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._idurability_)}},
    // sint32 _iMaxDur = 21;
    {::_pbi::TcParser::FastZ32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imaxdur_)}},
    // sint32 _iPLDam = 22;
    {::_pbi::TcParser::FastZ32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipldam_)}},
    // sint32 _iPLToHit = 23;
    {::_pbi::TcParser::FastZ32S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipltohit_)}},
    // sint32 _iPLAC = 24;
    {::_pbi::TcParser::FastZ32S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplac_)}},
    // sint32 _iPLStr = 25;
    {::_pbi::TcParser::FastZ32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplstr_)}},
    // sint32 _iPLMag = 26;
    {::_pbi::TcParser::FastZ32S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplmag_)}},
    // sint32 _iPLDex = 27;
    {::_pbi::TcParser::FastZ32S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipldex_)}},
    // sint32 _iPLVit = 28;
    {::_pbi::TcParser::FastZ32S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplvit_)}},
    // sint32 _iPLFR = 29;
    {::_pbi::TcParser::FastZ32S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplfr_)}},
    // sint32 _iPLLR = 30;
    {::_pbi::TcParser::FastZ32S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipllr_)}},
    // sint32 _iPLMR = 31;
    {::_pbi::TcParser::FastZ32S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplmr_)}},
  }}, {{
    33, 0, 1,
    0, 32,
    65535, 65535
  }}, {{
    // uint32 ID = 1;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // sint32 _itype = 2;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._itype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _ix = 3;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ix_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iy = 4;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // bool _iIdentified = 5;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iidentified_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 _iMagical = 6;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imagical_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string _iName = 7;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string _iIName = 8;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iiname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 _iClass = 9;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iclass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // sint32 _iCurs = 10;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._icurs_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iValue = 11;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ivalue_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iMinDam = 12;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imindam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iMaxDam = 13;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imaxdam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iAC = 14;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iac_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iFlags = 15;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iflags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iMiscId = 16;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imiscid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iSpell = 17;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ispell_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iCharges = 18;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._icharges_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iMaxCharges = 19;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imaxcharges_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iDurability = 20;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._idurability_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iMaxDur = 21;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imaxdur_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLDam = 22;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipldam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLToHit = 23;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipltohit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLAC = 24;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplac_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLStr = 25;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplstr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLMag = 26;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplmag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLDex = 27;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipldex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLVit = 28;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplvit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLFR = 29;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplfr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLLR = 30;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipllr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLMR = 31;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplmr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLMana = 32;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplmana_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLHP = 33;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplhp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLDamMod = 34;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipldammod_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLGetHit = 35;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iplgethit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPLLight = 36;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ipllight_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iSplLvlAdd = 37;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ispllvladd_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iFMinDam = 38;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ifmindam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iFMaxDam = 39;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ifmaxdam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iLMinDam = 40;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ilmindam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iLMaxDam = 41;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._ilmaxdam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iPrePower = 42;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iprepower_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iSufPower = 43;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._isufpower_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iMinStr = 44;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iminstr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iMinMag = 45;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._iminmag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _iMinDex = 46;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._imindex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // bool _iStatFlag = 47;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_._istatflag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // sint32 IDidx = 48;
    {PROTOBUF_FIELD_OFFSET(ItemData, _impl_.ididx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
  }},
  // no aux_entries
  {{
    "\22\0\0\0\0\0\0\6\7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "dapi.data.ItemData"
    "_iName"
    "_iIName"
  }},
};

PROTOBUF_NOINLINE void ItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.ItemData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._iname_.ClearToEmpty();
  _impl_._iiname_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ididx_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ididx_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ItemData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ItemData& this_ = static_cast<const ItemData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ItemData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ItemData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.ItemData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 ID = 1;
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_id(), target);
          }

          // sint32 _itype = 2;
          if (this_._internal__itype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                2, this_._internal__itype(), target);
          }

          // sint32 _ix = 3;
          if (this_._internal__ix() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                3, this_._internal__ix(), target);
          }

          // sint32 _iy = 4;
          if (this_._internal__iy() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                4, this_._internal__iy(), target);
          }

          // bool _iIdentified = 5;
          if (this_._internal__iidentified() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal__iidentified(), target);
          }

          // uint32 _iMagical = 6;
          if (this_._internal__imagical() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                6, this_._internal__imagical(), target);
          }

          // string _iName = 7;
          if (!this_._internal__iname().empty()) {
            const std::string& _s = this_._internal__iname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dapi.data.ItemData._iName");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string _iIName = 8;
          if (!this_._internal__iiname().empty()) {
            const std::string& _s = this_._internal__iiname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dapi.data.ItemData._iIName");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // uint32 _iClass = 9;
          if (this_._internal__iclass() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                9, this_._internal__iclass(), target);
          }

          // sint32 _iCurs = 10;
          if (this_._internal__icurs() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                10, this_._internal__icurs(), target);
          }

          // sint32 _iValue = 11;
          if (this_._internal__ivalue() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                11, this_._internal__ivalue(), target);
          }

          // sint32 _iMinDam = 12;
          if (this_._internal__imindam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                12, this_._internal__imindam(), target);
          }

          // sint32 _iMaxDam = 13;
          if (this_._internal__imaxdam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                13, this_._internal__imaxdam(), target);
          }

          // sint32 _iAC = 14;
          if (this_._internal__iac() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                14, this_._internal__iac(), target);
          }

          // sint32 _iFlags = 15;
          if (this_._internal__iflags() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                15, this_._internal__iflags(), target);
          }

          // sint32 _iMiscId = 16;
          if (this_._internal__imiscid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                16, this_._internal__imiscid(), target);
          }

          // sint32 _iSpell = 17;
          if (this_._internal__ispell() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                17, this_._internal__ispell(), target);
          }

          // sint32 _iCharges = 18;
          if (this_._internal__icharges() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                18, this_._internal__icharges(), target);
          }

          // sint32 _iMaxCharges = 19;
          if (this_._internal__imaxcharges() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                19, this_._internal__imaxcharges(), target);
          }

          // sint32 _iDurability = 20;
          if (this_._internal__idurability() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                20, this_._internal__idurability(), target);
          }

          // sint32 _iMaxDur = 21;
          if (this_._internal__imaxdur() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                21, this_._internal__imaxdur(), target);
          }

          // sint32 _iPLDam = 22;
          if (this_._internal__ipldam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                22, this_._internal__ipldam(), target);
          }

          // sint32 _iPLToHit = 23;
          if (this_._internal__ipltohit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                23, this_._internal__ipltohit(), target);
          }

          // sint32 _iPLAC = 24;
          if (this_._internal__iplac() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                24, this_._internal__iplac(), target);
          }

          // sint32 _iPLStr = 25;
          if (this_._internal__iplstr() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                25, this_._internal__iplstr(), target);
          }

          // sint32 _iPLMag = 26;
          if (this_._internal__iplmag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                26, this_._internal__iplmag(), target);
          }

          // sint32 _iPLDex = 27;
          if (this_._internal__ipldex() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                27, this_._internal__ipldex(), target);
          }

          // sint32 _iPLVit = 28;
          if (this_._internal__iplvit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                28, this_._internal__iplvit(), target);
          }

          // sint32 _iPLFR = 29;
          if (this_._internal__iplfr() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                29, this_._internal__iplfr(), target);
          }

          // sint32 _iPLLR = 30;
          if (this_._internal__ipllr() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                30, this_._internal__ipllr(), target);
          }

          // sint32 _iPLMR = 31;
          if (this_._internal__iplmr() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                31, this_._internal__iplmr(), target);
          }

          // sint32 _iPLMana = 32;
          if (this_._internal__iplmana() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                32, this_._internal__iplmana(), target);
          }

          // sint32 _iPLHP = 33;
          if (this_._internal__iplhp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                33, this_._internal__iplhp(), target);
          }

          // sint32 _iPLDamMod = 34;
          if (this_._internal__ipldammod() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                34, this_._internal__ipldammod(), target);
          }

          // sint32 _iPLGetHit = 35;
          if (this_._internal__iplgethit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                35, this_._internal__iplgethit(), target);
          }

          // sint32 _iPLLight = 36;
          if (this_._internal__ipllight() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                36, this_._internal__ipllight(), target);
          }

          // sint32 _iSplLvlAdd = 37;
          if (this_._internal__ispllvladd() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                37, this_._internal__ispllvladd(), target);
          }

          // sint32 _iFMinDam = 38;
          if (this_._internal__ifmindam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                38, this_._internal__ifmindam(), target);
          }

          // sint32 _iFMaxDam = 39;
          if (this_._internal__ifmaxdam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                39, this_._internal__ifmaxdam(), target);
          }

          // sint32 _iLMinDam = 40;
          if (this_._internal__ilmindam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                40, this_._internal__ilmindam(), target);
          }

          // sint32 _iLMaxDam = 41;
          if (this_._internal__ilmaxdam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                41, this_._internal__ilmaxdam(), target);
          }

          // sint32 _iPrePower = 42;
          if (this_._internal__iprepower() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                42, this_._internal__iprepower(), target);
          }

          // sint32 _iSufPower = 43;
          if (this_._internal__isufpower() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                43, this_._internal__isufpower(), target);
          }

          // sint32 _iMinStr = 44;
          if (this_._internal__iminstr() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                44, this_._internal__iminstr(), target);
          }

          // sint32 _iMinMag = 45;
          if (this_._internal__iminmag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                45, this_._internal__iminmag(), target);
          }

          // sint32 _iMinDex = 46;
          if (this_._internal__imindex() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                46, this_._internal__imindex(), target);
          }

          // bool _iStatFlag = 47;
          if (this_._internal__istatflag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                47, this_._internal__istatflag(), target);
          }

          // sint32 IDidx = 48;
          if (this_._internal_ididx() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                48, this_._internal_ididx(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.ItemData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ItemData::ByteSizeLong(const MessageLite& base) {
          const ItemData& this_ = static_cast<const ItemData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ItemData::ByteSizeLong() const {
          const ItemData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.ItemData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string _iName = 7;
            if (!this_._internal__iname().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal__iname());
            }
            // string _iIName = 8;
            if (!this_._internal__iiname().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal__iiname());
            }
            // uint32 ID = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_id());
            }
            // sint32 _itype = 2;
            if (this_._internal__itype() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__itype());
            }
            // sint32 _ix = 3;
            if (this_._internal__ix() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__ix());
            }
            // sint32 _iy = 4;
            if (this_._internal__iy() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__iy());
            }
            // uint32 _iMagical = 6;
            if (this_._internal__imagical() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal__imagical());
            }
            // uint32 _iClass = 9;
            if (this_._internal__iclass() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal__iclass());
            }
            // sint32 _iCurs = 10;
            if (this_._internal__icurs() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__icurs());
            }
            // sint32 _iValue = 11;
            if (this_._internal__ivalue() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__ivalue());
            }
            // sint32 _iMinDam = 12;
            if (this_._internal__imindam() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__imindam());
            }
            // sint32 _iMaxDam = 13;
            if (this_._internal__imaxdam() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__imaxdam());
            }
            // sint32 _iAC = 14;
            if (this_._internal__iac() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__iac());
            }
            // sint32 _iFlags = 15;
            if (this_._internal__iflags() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__iflags());
            }
            // sint32 _iMiscId = 16;
            if (this_._internal__imiscid() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__imiscid());
            }
            // sint32 _iSpell = 17;
            if (this_._internal__ispell() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ispell());
            }
            // sint32 _iCharges = 18;
            if (this_._internal__icharges() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__icharges());
            }
            // sint32 _iMaxCharges = 19;
            if (this_._internal__imaxcharges() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__imaxcharges());
            }
            // sint32 _iDurability = 20;
            if (this_._internal__idurability() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__idurability());
            }
            // sint32 _iMaxDur = 21;
            if (this_._internal__imaxdur() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__imaxdur());
            }
            // sint32 _iPLDam = 22;
            if (this_._internal__ipldam() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ipldam());
            }
            // sint32 _iPLToHit = 23;
            if (this_._internal__ipltohit() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ipltohit());
            }
            // sint32 _iPLAC = 24;
            if (this_._internal__iplac() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iplac());
            }
            // sint32 _iPLStr = 25;
            if (this_._internal__iplstr() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iplstr());
            }
            // sint32 _iPLMag = 26;
            if (this_._internal__iplmag() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iplmag());
            }
            // bool _iIdentified = 5;
            if (this_._internal__iidentified() != 0) {
              total_size += 2;
            }
            // bool _iStatFlag = 47;
            if (this_._internal__istatflag() != 0) {
              total_size += 3;
            }
            // sint32 _iPLDex = 27;
            if (this_._internal__ipldex() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ipldex());
            }
            // sint32 _iPLVit = 28;
            if (this_._internal__iplvit() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iplvit());
            }
            // sint32 _iPLFR = 29;
            if (this_._internal__iplfr() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iplfr());
            }
            // sint32 _iPLLR = 30;
            if (this_._internal__ipllr() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ipllr());
            }
            // sint32 _iPLMR = 31;
            if (this_._internal__iplmr() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iplmr());
            }
            // sint32 _iPLMana = 32;
            if (this_._internal__iplmana() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iplmana());
            }
            // sint32 _iPLHP = 33;
            if (this_._internal__iplhp() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iplhp());
            }
            // sint32 _iPLDamMod = 34;
            if (this_._internal__ipldammod() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ipldammod());
            }
            // sint32 _iPLGetHit = 35;
            if (this_._internal__iplgethit() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iplgethit());
            }
            // sint32 _iPLLight = 36;
            if (this_._internal__ipllight() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ipllight());
            }
            // sint32 _iSplLvlAdd = 37;
            if (this_._internal__ispllvladd() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ispllvladd());
            }
            // sint32 _iFMinDam = 38;
            if (this_._internal__ifmindam() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ifmindam());
            }
            // sint32 _iFMaxDam = 39;
            if (this_._internal__ifmaxdam() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ifmaxdam());
            }
            // sint32 _iLMinDam = 40;
            if (this_._internal__ilmindam() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ilmindam());
            }
            // sint32 _iLMaxDam = 41;
            if (this_._internal__ilmaxdam() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__ilmaxdam());
            }
            // sint32 _iPrePower = 42;
            if (this_._internal__iprepower() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iprepower());
            }
            // sint32 _iSufPower = 43;
            if (this_._internal__isufpower() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__isufpower());
            }
            // sint32 _iMinStr = 44;
            if (this_._internal__iminstr() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iminstr());
            }
            // sint32 _iMinMag = 45;
            if (this_._internal__iminmag() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__iminmag());
            }
            // sint32 _iMinDex = 46;
            if (this_._internal__imindex() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__imindex());
            }
            // sint32 IDidx = 48;
            if (this_._internal_ididx() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal_ididx());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void ItemData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ItemData*>(&to_msg);
  auto& from = static_cast<const ItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.ItemData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal__iname().empty()) {
    _this->_internal_set__iname(from._internal__iname());
  }
  if (!from._internal__iiname().empty()) {
    _this->_internal_set__iiname(from._internal__iiname());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal__itype() != 0) {
    _this->_impl_._itype_ = from._impl_._itype_;
  }
  if (from._internal__ix() != 0) {
    _this->_impl_._ix_ = from._impl_._ix_;
  }
  if (from._internal__iy() != 0) {
    _this->_impl_._iy_ = from._impl_._iy_;
  }
  if (from._internal__imagical() != 0) {
    _this->_impl_._imagical_ = from._impl_._imagical_;
  }
  if (from._internal__iclass() != 0) {
    _this->_impl_._iclass_ = from._impl_._iclass_;
  }
  if (from._internal__icurs() != 0) {
    _this->_impl_._icurs_ = from._impl_._icurs_;
  }
  if (from._internal__ivalue() != 0) {
    _this->_impl_._ivalue_ = from._impl_._ivalue_;
  }
  if (from._internal__imindam() != 0) {
    _this->_impl_._imindam_ = from._impl_._imindam_;
  }
  if (from._internal__imaxdam() != 0) {
    _this->_impl_._imaxdam_ = from._impl_._imaxdam_;
  }
  if (from._internal__iac() != 0) {
    _this->_impl_._iac_ = from._impl_._iac_;
  }
  if (from._internal__iflags() != 0) {
    _this->_impl_._iflags_ = from._impl_._iflags_;
  }
  if (from._internal__imiscid() != 0) {
    _this->_impl_._imiscid_ = from._impl_._imiscid_;
  }
  if (from._internal__ispell() != 0) {
    _this->_impl_._ispell_ = from._impl_._ispell_;
  }
  if (from._internal__icharges() != 0) {
    _this->_impl_._icharges_ = from._impl_._icharges_;
  }
  if (from._internal__imaxcharges() != 0) {
    _this->_impl_._imaxcharges_ = from._impl_._imaxcharges_;
  }
  if (from._internal__idurability() != 0) {
    _this->_impl_._idurability_ = from._impl_._idurability_;
  }
  if (from._internal__imaxdur() != 0) {
    _this->_impl_._imaxdur_ = from._impl_._imaxdur_;
  }
  if (from._internal__ipldam() != 0) {
    _this->_impl_._ipldam_ = from._impl_._ipldam_;
  }
  if (from._internal__ipltohit() != 0) {
    _this->_impl_._ipltohit_ = from._impl_._ipltohit_;
  }
  if (from._internal__iplac() != 0) {
    _this->_impl_._iplac_ = from._impl_._iplac_;
  }
  if (from._internal__iplstr() != 0) {
    _this->_impl_._iplstr_ = from._impl_._iplstr_;
  }
  if (from._internal__iplmag() != 0) {
    _this->_impl_._iplmag_ = from._impl_._iplmag_;
  }
  if (from._internal__iidentified() != 0) {
    _this->_impl_._iidentified_ = from._impl_._iidentified_;
  }
  if (from._internal__istatflag() != 0) {
    _this->_impl_._istatflag_ = from._impl_._istatflag_;
  }
  if (from._internal__ipldex() != 0) {
    _this->_impl_._ipldex_ = from._impl_._ipldex_;
  }
  if (from._internal__iplvit() != 0) {
    _this->_impl_._iplvit_ = from._impl_._iplvit_;
  }
  if (from._internal__iplfr() != 0) {
    _this->_impl_._iplfr_ = from._impl_._iplfr_;
  }
  if (from._internal__ipllr() != 0) {
    _this->_impl_._ipllr_ = from._impl_._ipllr_;
  }
  if (from._internal__iplmr() != 0) {
    _this->_impl_._iplmr_ = from._impl_._iplmr_;
  }
  if (from._internal__iplmana() != 0) {
    _this->_impl_._iplmana_ = from._impl_._iplmana_;
  }
  if (from._internal__iplhp() != 0) {
    _this->_impl_._iplhp_ = from._impl_._iplhp_;
  }
  if (from._internal__ipldammod() != 0) {
    _this->_impl_._ipldammod_ = from._impl_._ipldammod_;
  }
  if (from._internal__iplgethit() != 0) {
    _this->_impl_._iplgethit_ = from._impl_._iplgethit_;
  }
  if (from._internal__ipllight() != 0) {
    _this->_impl_._ipllight_ = from._impl_._ipllight_;
  }
  if (from._internal__ispllvladd() != 0) {
    _this->_impl_._ispllvladd_ = from._impl_._ispllvladd_;
  }
  if (from._internal__ifmindam() != 0) {
    _this->_impl_._ifmindam_ = from._impl_._ifmindam_;
  }
  if (from._internal__ifmaxdam() != 0) {
    _this->_impl_._ifmaxdam_ = from._impl_._ifmaxdam_;
  }
  if (from._internal__ilmindam() != 0) {
    _this->_impl_._ilmindam_ = from._impl_._ilmindam_;
  }
  if (from._internal__ilmaxdam() != 0) {
    _this->_impl_._ilmaxdam_ = from._impl_._ilmaxdam_;
  }
  if (from._internal__iprepower() != 0) {
    _this->_impl_._iprepower_ = from._impl_._iprepower_;
  }
  if (from._internal__isufpower() != 0) {
    _this->_impl_._isufpower_ = from._impl_._isufpower_;
  }
  if (from._internal__iminstr() != 0) {
    _this->_impl_._iminstr_ = from._impl_._iminstr_;
  }
  if (from._internal__iminmag() != 0) {
    _this->_impl_._iminmag_ = from._impl_._iminmag_;
  }
  if (from._internal__imindex() != 0) {
    _this->_impl_._imindex_ = from._impl_._imindex_;
  }
  if (from._internal_ididx() != 0) {
    _this->_impl_.ididx_ = from._impl_.ididx_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ItemData::CopyFrom(const ItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.ItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ItemData::InternalSwap(ItemData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_._iname_, &other->_impl_._iname_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_._iiname_, &other->_impl_._iiname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemData, _impl_.ididx_)
      + sizeof(ItemData::_impl_.ididx_)
      - PROTOBUF_FIELD_OFFSET(ItemData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

// ===================================================================

class PlayerData::_Internal {
 public:
};

PlayerData::PlayerData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dapi.data.PlayerData)
}
inline PROTOBUF_NDEBUG_INLINE PlayerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::dapi::data::PlayerData& from_msg)
      : _pspllvl_{visibility, arena, from._pspllvl_},
        __pspllvl_cached_byte_size_{0},
        invbody_{visibility, arena, from.invbody_},
        _invbody_cached_byte_size_{0},
        invlist_{visibility, arena, from.invlist_},
        _invlist_cached_byte_size_{0},
        invgrid_{visibility, arena, from.invgrid_},
        _invgrid_cached_byte_size_{0},
        spdlist_{visibility, arena, from.spdlist_},
        _spdlist_cached_byte_size_{0},
        _pname_(arena, from._pname_),
        _cached_size_{0} {}

PlayerData::PlayerData(
    ::google::protobuf::Arena* arena,
    const PlayerData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlayerData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, _pmode_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, _pmode_),
           offsetof(Impl_, pmanashield_) -
               offsetof(Impl_, _pmode_) +
               sizeof(Impl_::pmanashield_));

  // @@protoc_insertion_point(copy_constructor:dapi.data.PlayerData)
}
inline PROTOBUF_NDEBUG_INLINE PlayerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _pspllvl_{visibility, arena},
        __pspllvl_cached_byte_size_{0},
        invbody_{visibility, arena},
        _invbody_cached_byte_size_{0},
        invlist_{visibility, arena},
        _invlist_cached_byte_size_{0},
        invgrid_{visibility, arena},
        _invgrid_cached_byte_size_{0},
        spdlist_{visibility, arena},
        _spdlist_cached_byte_size_{0},
        _pname_(arena),
        _cached_size_{0} {}

inline void PlayerData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, _pmode_),
           0,
           offsetof(Impl_, pmanashield_) -
               offsetof(Impl_, _pmode_) +
               sizeof(Impl_::pmanashield_));
}
PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:dapi.data.PlayerData)
  SharedDtor(*this);
}
inline void PlayerData::SharedDtor(MessageLite& self) {
  PlayerData& this_ = static_cast<PlayerData&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_._pname_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PlayerData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PlayerData(arena);
}
constexpr auto PlayerData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pspllvl_) +
          decltype(PlayerData::_impl_._pspllvl_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.invbody_) +
          decltype(PlayerData::_impl_.invbody_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.invlist_) +
          decltype(PlayerData::_impl_.invlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.invgrid_) +
          decltype(PlayerData::_impl_.invgrid_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.spdlist_) +
          decltype(PlayerData::_impl_.spdlist_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PlayerData), alignof(PlayerData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PlayerData::PlacementNew_,
                                 sizeof(PlayerData),
                                 alignof(PlayerData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<21> PlayerData::_class_data_ = {
    {
        &_PlayerData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PlayerData::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<PlayerData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PlayerData::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<PlayerData>(), &PlayerData::ByteSizeLong,
            &PlayerData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._cached_size_),
        true,
    },
    "dapi.data.PlayerData",
};
const ::google::protobuf::internal::ClassData* PlayerData::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 50, 0, 83, 9> PlayerData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    50, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    50,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dapi::data::PlayerData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // sint32 _pmode = 1;
    {::_pbi::TcParser::FastZ32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmode_)}},
    // sint32 pnum = 2;
    {::_pbi::TcParser::FastZ32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.pnum_)}},
    // sint32 plrlevel = 3;
    {::_pbi::TcParser::FastZ32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.plrlevel_)}},
    // sint32 _px = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._px_)}},
    // sint32 _py = 5;
    {::_pbi::TcParser::FastZ32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._py_)}},
    // sint32 _pfutx = 6;
    {::_pbi::TcParser::FastZ32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pfutx_)}},
    // sint32 _pfuty = 7;
    {::_pbi::TcParser::FastZ32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pfuty_)}},
    // sint32 _pdir = 8;
    {::_pbi::TcParser::FastZ32S1,
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pdir_)}},
    // sint32 _pRSpell = 9;
    {::_pbi::TcParser::FastZ32S1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._prspell_)}},
    // uint32 _pRsplType = 10;
    {::_pbi::TcParser::FastV32S1,
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._prspltype_)}},
    // repeated uint32 _pSplLvl = 11;
    {::_pbi::TcParser::FastV32P1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pspllvl_)}},
    // uint64 _pMemSpells = 12;
    {::_pbi::TcParser::FastV64S1,
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmemspells_)}},
    // uint64 _pAblSpells = 13;
    {::_pbi::TcParser::FastV64S1,
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pablspells_)}},
    // uint64 _pScrlSpells = 14;
    {::_pbi::TcParser::FastV64S1,
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pscrlspells_)}},
    // string _pName = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pname_)}},
    // uint32 _pClass = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pclass_)}},
    // uint32 _pStrength = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pstrength_)}},
    // uint32 _pBaseStr = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pbasestr_)}},
    // uint32 _pMagic = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmagic_)}},
    // uint32 _pBaseMag = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pbasemag_)}},
    // uint32 _pDexterity = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pdexterity_)}},
    // uint32 _pBaseDex = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pbasedex_)}},
    // uint32 _pVitality = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pvitality_)}},
    // uint32 _pBaseVit = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pbasevit_)}},
    // uint32 _pStatPts = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pstatpts_)}},
    // uint32 _pDamageMod = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pdamagemod_)}},
    // uint32 _pHitPoints = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._phitpoints_)}},
    // uint32 _pMaxHP = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmaxhp_)}},
    // sint32 _pMana = 29;
    {::_pbi::TcParser::FastZ32S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmana_)}},
    // uint32 _pMaxMana = 30;
    {::_pbi::TcParser::FastV32S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmaxmana_)}},
    // uint32 _pLevel = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._plevel_)}},
  }}, {{
    33, 0, 2,
    0, 32, 65532, 48,
    65535, 65535
  }}, {{
    // sint32 _pmode = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 pnum = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.pnum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 plrlevel = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.plrlevel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _px = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._px_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _py = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._py_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _pfutx = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pfutx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _pfuty = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pfuty_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _pdir = 8;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pdir_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // sint32 _pRSpell = 9;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._prspell_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // uint32 _pRsplType = 10;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._prspltype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated uint32 _pSplLvl = 11;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pspllvl_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // uint64 _pMemSpells = 12;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmemspells_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 _pAblSpells = 13;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pablspells_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 _pScrlSpells = 14;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pscrlspells_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string _pName = 15;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 _pClass = 16;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pclass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pStrength = 17;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pstrength_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pBaseStr = 18;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pbasestr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pMagic = 19;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmagic_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pBaseMag = 20;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pbasemag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pDexterity = 21;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pdexterity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pBaseDex = 22;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pbasedex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pVitality = 23;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pvitality_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pBaseVit = 24;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pbasevit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pStatPts = 25;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pstatpts_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pDamageMod = 26;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pdamagemod_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pHitPoints = 27;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._phitpoints_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pMaxHP = 28;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmaxhp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // sint32 _pMana = 29;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmana_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // uint32 _pMaxMana = 30;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmaxmana_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pLevel = 31;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._plevel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pExperience = 32;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pexperience_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pArmorClass = 33;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._parmorclass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pMagResist = 34;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmagresist_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pFireResist = 35;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pfireresist_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pLightResist = 36;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._plightresist_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pGold = 37;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pgold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated sint32 InvBody = 38;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.invbody_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt32)},
    // repeated sint32 InvList = 39;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.invlist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt32)},
    // repeated sint32 InvGrid = 40;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.invgrid_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt32)},
    // repeated sint32 SpdList = 41;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.spdlist_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedSInt32)},
    // sint32 HoldItem = 42;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.holditem_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // uint32 _pIAC = 43;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._piac_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pIMinDam = 44;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pimindam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pIMaxDam = 45;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pimaxdam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pIBonusDam = 46;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pibonusdam_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pIBonusToHit = 47;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pibonustohit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pIBonusAC = 48;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pibonusac_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 _pIBonusDamMod = 49;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pibonusdammod_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool pManaShield = 50;
    {PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.pmanashield_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\24\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "dapi.data.PlayerData"
    "_pName"
  }},
};

PROTOBUF_NOINLINE void PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:dapi.data.PlayerData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._pspllvl_.Clear();
  _impl_.invbody_.Clear();
  _impl_.invlist_.Clear();
  _impl_.invgrid_.Clear();
  _impl_.spdlist_.Clear();
  _impl_._pname_.ClearToEmpty();
  ::memset(&_impl_._pmode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pmanashield_) -
      reinterpret_cast<char*>(&_impl_._pmode_)) + sizeof(_impl_.pmanashield_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerData& this_ = static_cast<const PlayerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:dapi.data.PlayerData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // sint32 _pmode = 1;
          if (this_._internal__pmode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                1, this_._internal__pmode(), target);
          }

          // sint32 pnum = 2;
          if (this_._internal_pnum() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                2, this_._internal_pnum(), target);
          }

          // sint32 plrlevel = 3;
          if (this_._internal_plrlevel() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                3, this_._internal_plrlevel(), target);
          }

          // sint32 _px = 4;
          if (this_._internal__px() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                4, this_._internal__px(), target);
          }

          // sint32 _py = 5;
          if (this_._internal__py() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                5, this_._internal__py(), target);
          }

          // sint32 _pfutx = 6;
          if (this_._internal__pfutx() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                6, this_._internal__pfutx(), target);
          }

          // sint32 _pfuty = 7;
          if (this_._internal__pfuty() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                7, this_._internal__pfuty(), target);
          }

          // sint32 _pdir = 8;
          if (this_._internal__pdir() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                8, this_._internal__pdir(), target);
          }

          // sint32 _pRSpell = 9;
          if (this_._internal__prspell() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                9, this_._internal__prspell(), target);
          }

          // uint32 _pRsplType = 10;
          if (this_._internal__prspltype() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                10, this_._internal__prspltype(), target);
          }

          // repeated uint32 _pSplLvl = 11;
          {
            int byte_size = this_._impl_.__pspllvl_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  11, this_._internal__pspllvl(), byte_size, target);
            }
          }

          // uint64 _pMemSpells = 12;
          if (this_._internal__pmemspells() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                12, this_._internal__pmemspells(), target);
          }

          // uint64 _pAblSpells = 13;
          if (this_._internal__pablspells() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                13, this_._internal__pablspells(), target);
          }

          // uint64 _pScrlSpells = 14;
          if (this_._internal__pscrlspells() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                14, this_._internal__pscrlspells(), target);
          }

          // string _pName = 15;
          if (!this_._internal__pname().empty()) {
            const std::string& _s = this_._internal__pname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dapi.data.PlayerData._pName");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // uint32 _pClass = 16;
          if (this_._internal__pclass() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                16, this_._internal__pclass(), target);
          }

          // uint32 _pStrength = 17;
          if (this_._internal__pstrength() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                17, this_._internal__pstrength(), target);
          }

          // uint32 _pBaseStr = 18;
          if (this_._internal__pbasestr() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                18, this_._internal__pbasestr(), target);
          }

          // uint32 _pMagic = 19;
          if (this_._internal__pmagic() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                19, this_._internal__pmagic(), target);
          }

          // uint32 _pBaseMag = 20;
          if (this_._internal__pbasemag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                20, this_._internal__pbasemag(), target);
          }

          // uint32 _pDexterity = 21;
          if (this_._internal__pdexterity() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                21, this_._internal__pdexterity(), target);
          }

          // uint32 _pBaseDex = 22;
          if (this_._internal__pbasedex() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                22, this_._internal__pbasedex(), target);
          }

          // uint32 _pVitality = 23;
          if (this_._internal__pvitality() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                23, this_._internal__pvitality(), target);
          }

          // uint32 _pBaseVit = 24;
          if (this_._internal__pbasevit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                24, this_._internal__pbasevit(), target);
          }

          // uint32 _pStatPts = 25;
          if (this_._internal__pstatpts() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                25, this_._internal__pstatpts(), target);
          }

          // uint32 _pDamageMod = 26;
          if (this_._internal__pdamagemod() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                26, this_._internal__pdamagemod(), target);
          }

          // uint32 _pHitPoints = 27;
          if (this_._internal__phitpoints() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                27, this_._internal__phitpoints(), target);
          }

          // uint32 _pMaxHP = 28;
          if (this_._internal__pmaxhp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                28, this_._internal__pmaxhp(), target);
          }

          // sint32 _pMana = 29;
          if (this_._internal__pmana() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                29, this_._internal__pmana(), target);
          }

          // uint32 _pMaxMana = 30;
          if (this_._internal__pmaxmana() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                30, this_._internal__pmaxmana(), target);
          }

          // uint32 _pLevel = 31;
          if (this_._internal__plevel() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                31, this_._internal__plevel(), target);
          }

          // uint32 _pExperience = 32;
          if (this_._internal__pexperience() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                32, this_._internal__pexperience(), target);
          }

          // uint32 _pArmorClass = 33;
          if (this_._internal__parmorclass() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                33, this_._internal__parmorclass(), target);
          }

          // uint32 _pMagResist = 34;
          if (this_._internal__pmagresist() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                34, this_._internal__pmagresist(), target);
          }

          // uint32 _pFireResist = 35;
          if (this_._internal__pfireresist() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                35, this_._internal__pfireresist(), target);
          }

          // uint32 _pLightResist = 36;
          if (this_._internal__plightresist() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                36, this_._internal__plightresist(), target);
          }

          // uint32 _pGold = 37;
          if (this_._internal__pgold() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                37, this_._internal__pgold(), target);
          }

          // repeated sint32 InvBody = 38;
          {
            int byte_size = this_._impl_._invbody_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt32Packed(
                  38, this_._internal_invbody(), byte_size, target);
            }
          }

          // repeated sint32 InvList = 39;
          {
            int byte_size = this_._impl_._invlist_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt32Packed(
                  39, this_._internal_invlist(), byte_size, target);
            }
          }

          // repeated sint32 InvGrid = 40;
          {
            int byte_size = this_._impl_._invgrid_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt32Packed(
                  40, this_._internal_invgrid(), byte_size, target);
            }
          }

          // repeated sint32 SpdList = 41;
          {
            int byte_size = this_._impl_._spdlist_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteSInt32Packed(
                  41, this_._internal_spdlist(), byte_size, target);
            }
          }

          // sint32 HoldItem = 42;
          if (this_._internal_holditem() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                42, this_._internal_holditem(), target);
          }

          // uint32 _pIAC = 43;
          if (this_._internal__piac() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                43, this_._internal__piac(), target);
          }

          // uint32 _pIMinDam = 44;
          if (this_._internal__pimindam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                44, this_._internal__pimindam(), target);
          }

          // uint32 _pIMaxDam = 45;
          if (this_._internal__pimaxdam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                45, this_._internal__pimaxdam(), target);
          }

          // uint32 _pIBonusDam = 46;
          if (this_._internal__pibonusdam() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                46, this_._internal__pibonusdam(), target);
          }

          // uint32 _pIBonusToHit = 47;
          if (this_._internal__pibonustohit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                47, this_._internal__pibonustohit(), target);
          }

          // uint32 _pIBonusAC = 48;
          if (this_._internal__pibonusac() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                48, this_._internal__pibonusac(), target);
          }

          // uint32 _pIBonusDamMod = 49;
          if (this_._internal__pibonusdammod() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                49, this_._internal__pibonusdammod(), target);
          }

          // bool pManaShield = 50;
          if (this_._internal_pmanashield() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                50, this_._internal_pmanashield(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:dapi.data.PlayerData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerData::ByteSizeLong(const MessageLite& base) {
          const PlayerData& this_ = static_cast<const PlayerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerData::ByteSizeLong() const {
          const PlayerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:dapi.data.PlayerData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated uint32 _pSplLvl = 11;
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal__pspllvl(), 1,
                      this_._impl_.__pspllvl_cached_byte_size_);
            }
            // repeated sint32 InvBody = 38;
            {
              total_size +=
                  ::_pbi::WireFormatLite::SInt32SizeWithPackedTagSize(
                      this_._internal_invbody(), 2,
                      this_._impl_._invbody_cached_byte_size_);
            }
            // repeated sint32 InvList = 39;
            {
              total_size +=
                  ::_pbi::WireFormatLite::SInt32SizeWithPackedTagSize(
                      this_._internal_invlist(), 2,
                      this_._impl_._invlist_cached_byte_size_);
            }
            // repeated sint32 InvGrid = 40;
            {
              total_size +=
                  ::_pbi::WireFormatLite::SInt32SizeWithPackedTagSize(
                      this_._internal_invgrid(), 2,
                      this_._impl_._invgrid_cached_byte_size_);
            }
            // repeated sint32 SpdList = 41;
            {
              total_size +=
                  ::_pbi::WireFormatLite::SInt32SizeWithPackedTagSize(
                      this_._internal_spdlist(), 2,
                      this_._impl_._spdlist_cached_byte_size_);
            }
          }
           {
            // string _pName = 15;
            if (!this_._internal__pname().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal__pname());
            }
            // sint32 _pmode = 1;
            if (this_._internal__pmode() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__pmode());
            }
            // sint32 pnum = 2;
            if (this_._internal_pnum() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_pnum());
            }
            // sint32 plrlevel = 3;
            if (this_._internal_plrlevel() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_plrlevel());
            }
            // sint32 _px = 4;
            if (this_._internal__px() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__px());
            }
            // sint32 _py = 5;
            if (this_._internal__py() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__py());
            }
            // sint32 _pfutx = 6;
            if (this_._internal__pfutx() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__pfutx());
            }
            // sint32 _pfuty = 7;
            if (this_._internal__pfuty() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__pfuty());
            }
            // sint32 _pdir = 8;
            if (this_._internal__pdir() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__pdir());
            }
            // sint32 _pRSpell = 9;
            if (this_._internal__prspell() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal__prspell());
            }
            // uint32 _pRsplType = 10;
            if (this_._internal__prspltype() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal__prspltype());
            }
            // uint64 _pMemSpells = 12;
            if (this_._internal__pmemspells() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal__pmemspells());
            }
            // uint64 _pAblSpells = 13;
            if (this_._internal__pablspells() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal__pablspells());
            }
            // uint64 _pScrlSpells = 14;
            if (this_._internal__pscrlspells() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal__pscrlspells());
            }
            // uint32 _pClass = 16;
            if (this_._internal__pclass() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pclass());
            }
            // uint32 _pStrength = 17;
            if (this_._internal__pstrength() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pstrength());
            }
            // uint32 _pBaseStr = 18;
            if (this_._internal__pbasestr() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pbasestr());
            }
            // uint32 _pMagic = 19;
            if (this_._internal__pmagic() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pmagic());
            }
            // uint32 _pBaseMag = 20;
            if (this_._internal__pbasemag() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pbasemag());
            }
            // uint32 _pDexterity = 21;
            if (this_._internal__pdexterity() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pdexterity());
            }
            // uint32 _pBaseDex = 22;
            if (this_._internal__pbasedex() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pbasedex());
            }
            // uint32 _pVitality = 23;
            if (this_._internal__pvitality() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pvitality());
            }
            // uint32 _pBaseVit = 24;
            if (this_._internal__pbasevit() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pbasevit());
            }
            // uint32 _pStatPts = 25;
            if (this_._internal__pstatpts() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pstatpts());
            }
            // uint32 _pDamageMod = 26;
            if (this_._internal__pdamagemod() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pdamagemod());
            }
            // uint32 _pHitPoints = 27;
            if (this_._internal__phitpoints() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__phitpoints());
            }
            // uint32 _pMaxHP = 28;
            if (this_._internal__pmaxhp() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pmaxhp());
            }
            // sint32 _pMana = 29;
            if (this_._internal__pmana() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal__pmana());
            }
            // uint32 _pMaxMana = 30;
            if (this_._internal__pmaxmana() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pmaxmana());
            }
            // uint32 _pLevel = 31;
            if (this_._internal__plevel() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__plevel());
            }
            // uint32 _pExperience = 32;
            if (this_._internal__pexperience() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pexperience());
            }
            // uint32 _pArmorClass = 33;
            if (this_._internal__parmorclass() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__parmorclass());
            }
            // uint32 _pMagResist = 34;
            if (this_._internal__pmagresist() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pmagresist());
            }
            // uint32 _pFireResist = 35;
            if (this_._internal__pfireresist() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pfireresist());
            }
            // uint32 _pLightResist = 36;
            if (this_._internal__plightresist() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__plightresist());
            }
            // uint32 _pGold = 37;
            if (this_._internal__pgold() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pgold());
            }
            // sint32 HoldItem = 42;
            if (this_._internal_holditem() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::SInt32Size(
                                              this_._internal_holditem());
            }
            // uint32 _pIAC = 43;
            if (this_._internal__piac() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__piac());
            }
            // uint32 _pIMinDam = 44;
            if (this_._internal__pimindam() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pimindam());
            }
            // uint32 _pIMaxDam = 45;
            if (this_._internal__pimaxdam() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pimaxdam());
            }
            // uint32 _pIBonusDam = 46;
            if (this_._internal__pibonusdam() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pibonusdam());
            }
            // uint32 _pIBonusToHit = 47;
            if (this_._internal__pibonustohit() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pibonustohit());
            }
            // uint32 _pIBonusAC = 48;
            if (this_._internal__pibonusac() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pibonusac());
            }
            // uint32 _pIBonusDamMod = 49;
            if (this_._internal__pibonusdammod() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal__pibonusdammod());
            }
            // bool pManaShield = 50;
            if (this_._internal_pmanashield() != 0) {
              total_size += 3;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void PlayerData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerData*>(&to_msg);
  auto& from = static_cast<const PlayerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dapi.data.PlayerData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable__pspllvl()->MergeFrom(from._internal__pspllvl());
  _this->_internal_mutable_invbody()->MergeFrom(from._internal_invbody());
  _this->_internal_mutable_invlist()->MergeFrom(from._internal_invlist());
  _this->_internal_mutable_invgrid()->MergeFrom(from._internal_invgrid());
  _this->_internal_mutable_spdlist()->MergeFrom(from._internal_spdlist());
  if (!from._internal__pname().empty()) {
    _this->_internal_set__pname(from._internal__pname());
  }
  if (from._internal__pmode() != 0) {
    _this->_impl_._pmode_ = from._impl_._pmode_;
  }
  if (from._internal_pnum() != 0) {
    _this->_impl_.pnum_ = from._impl_.pnum_;
  }
  if (from._internal_plrlevel() != 0) {
    _this->_impl_.plrlevel_ = from._impl_.plrlevel_;
  }
  if (from._internal__px() != 0) {
    _this->_impl_._px_ = from._impl_._px_;
  }
  if (from._internal__py() != 0) {
    _this->_impl_._py_ = from._impl_._py_;
  }
  if (from._internal__pfutx() != 0) {
    _this->_impl_._pfutx_ = from._impl_._pfutx_;
  }
  if (from._internal__pfuty() != 0) {
    _this->_impl_._pfuty_ = from._impl_._pfuty_;
  }
  if (from._internal__pdir() != 0) {
    _this->_impl_._pdir_ = from._impl_._pdir_;
  }
  if (from._internal__prspell() != 0) {
    _this->_impl_._prspell_ = from._impl_._prspell_;
  }
  if (from._internal__prspltype() != 0) {
    _this->_impl_._prspltype_ = from._impl_._prspltype_;
  }
  if (from._internal__pmemspells() != 0) {
    _this->_impl_._pmemspells_ = from._impl_._pmemspells_;
  }
  if (from._internal__pablspells() != 0) {
    _this->_impl_._pablspells_ = from._impl_._pablspells_;
  }
  if (from._internal__pscrlspells() != 0) {
    _this->_impl_._pscrlspells_ = from._impl_._pscrlspells_;
  }
  if (from._internal__pclass() != 0) {
    _this->_impl_._pclass_ = from._impl_._pclass_;
  }
  if (from._internal__pstrength() != 0) {
    _this->_impl_._pstrength_ = from._impl_._pstrength_;
  }
  if (from._internal__pbasestr() != 0) {
    _this->_impl_._pbasestr_ = from._impl_._pbasestr_;
  }
  if (from._internal__pmagic() != 0) {
    _this->_impl_._pmagic_ = from._impl_._pmagic_;
  }
  if (from._internal__pbasemag() != 0) {
    _this->_impl_._pbasemag_ = from._impl_._pbasemag_;
  }
  if (from._internal__pdexterity() != 0) {
    _this->_impl_._pdexterity_ = from._impl_._pdexterity_;
  }
  if (from._internal__pbasedex() != 0) {
    _this->_impl_._pbasedex_ = from._impl_._pbasedex_;
  }
  if (from._internal__pvitality() != 0) {
    _this->_impl_._pvitality_ = from._impl_._pvitality_;
  }
  if (from._internal__pbasevit() != 0) {
    _this->_impl_._pbasevit_ = from._impl_._pbasevit_;
  }
  if (from._internal__pstatpts() != 0) {
    _this->_impl_._pstatpts_ = from._impl_._pstatpts_;
  }
  if (from._internal__pdamagemod() != 0) {
    _this->_impl_._pdamagemod_ = from._impl_._pdamagemod_;
  }
  if (from._internal__phitpoints() != 0) {
    _this->_impl_._phitpoints_ = from._impl_._phitpoints_;
  }
  if (from._internal__pmaxhp() != 0) {
    _this->_impl_._pmaxhp_ = from._impl_._pmaxhp_;
  }
  if (from._internal__pmana() != 0) {
    _this->_impl_._pmana_ = from._impl_._pmana_;
  }
  if (from._internal__pmaxmana() != 0) {
    _this->_impl_._pmaxmana_ = from._impl_._pmaxmana_;
  }
  if (from._internal__plevel() != 0) {
    _this->_impl_._plevel_ = from._impl_._plevel_;
  }
  if (from._internal__pexperience() != 0) {
    _this->_impl_._pexperience_ = from._impl_._pexperience_;
  }
  if (from._internal__parmorclass() != 0) {
    _this->_impl_._parmorclass_ = from._impl_._parmorclass_;
  }
  if (from._internal__pmagresist() != 0) {
    _this->_impl_._pmagresist_ = from._impl_._pmagresist_;
  }
  if (from._internal__pfireresist() != 0) {
    _this->_impl_._pfireresist_ = from._impl_._pfireresist_;
  }
  if (from._internal__plightresist() != 0) {
    _this->_impl_._plightresist_ = from._impl_._plightresist_;
  }
  if (from._internal__pgold() != 0) {
    _this->_impl_._pgold_ = from._impl_._pgold_;
  }
  if (from._internal_holditem() != 0) {
    _this->_impl_.holditem_ = from._impl_.holditem_;
  }
  if (from._internal__piac() != 0) {
    _this->_impl_._piac_ = from._impl_._piac_;
  }
  if (from._internal__pimindam() != 0) {
    _this->_impl_._pimindam_ = from._impl_._pimindam_;
  }
  if (from._internal__pimaxdam() != 0) {
    _this->_impl_._pimaxdam_ = from._impl_._pimaxdam_;
  }
  if (from._internal__pibonusdam() != 0) {
    _this->_impl_._pibonusdam_ = from._impl_._pibonusdam_;
  }
  if (from._internal__pibonustohit() != 0) {
    _this->_impl_._pibonustohit_ = from._impl_._pibonustohit_;
  }
  if (from._internal__pibonusac() != 0) {
    _this->_impl_._pibonusac_ = from._impl_._pibonusac_;
  }
  if (from._internal__pibonusdammod() != 0) {
    _this->_impl_._pibonusdammod_ = from._impl_._pibonusdammod_;
  }
  if (from._internal_pmanashield() != 0) {
    _this->_impl_.pmanashield_ = from._impl_.pmanashield_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PlayerData::CopyFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapi.data.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerData::InternalSwap(PlayerData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_._pspllvl_.InternalSwap(&other->_impl_._pspllvl_);
  _impl_.invbody_.InternalSwap(&other->_impl_.invbody_);
  _impl_.invlist_.InternalSwap(&other->_impl_.invlist_);
  _impl_.invgrid_.InternalSwap(&other->_impl_.invgrid_);
  _impl_.spdlist_.InternalSwap(&other->_impl_.spdlist_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_._pname_, &other->_impl_._pname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerData, _impl_.pmanashield_)
      + sizeof(PlayerData::_impl_.pmanashield_)
      - PROTOBUF_FIELD_OFFSET(PlayerData, _impl_._pmode_)>(
          reinterpret_cast<char*>(&_impl_._pmode_),
          reinterpret_cast<char*>(&other->_impl_._pmode_));
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace dapi
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
